import os, fnmatch, pptx, glob, tkinter, tempfile

import xml.etree.ElementTree as ET, tkinter as tk, pandas as pd

from PyPDF2 import PdfFileReader
from pptx import Presentation
from pdf2image import convert_from_path
from tkinter import *
from tkinter import filedialog

from PyPDF2 import PdfFileReader

# import win32compat as win32com # might be >> import win32core as win32com
from pathlib import Path
#from pptx import *
from pdf2jpg import pdf2jpg

LARGE_FONT = ('arial', 32, 'normal')


#Global Functions
def countFiles():
    folder_selected = filedialog.askdirectory()
    file_count = sum(len(files) for _, _, files in os.walk(folder_selected))
    print("Total Files:", file_count, "in", folder_selected)
#Lists files by count in root and all sub-directories
    # File format is case sensitive
    list = ["pdf", "ppt", "pptx", "jpg", "jpeg", "png", "svg", 'tif', "xml",
            "xlsm", "zip", "7z", "arj", "deb", "pkg", "rar", "csv", "dat",
            "log", "mdb", "sav", "sql", "tar", "apk", "bat", "bin", "cgi",
            "com", "exe", "jar", "msi", "py", "txt"]
    for l in list:

        i = 0
        for root, dirs, files in os.walk(folder_selected):
            for file in files:
                if file.endswith(l):
                    i += 1
        if i > 0:
            print('There were', i, l)

    print("----- Break-----")


def PPTtoTextParser():
    data = filedialog.askopenfilename()
    doc = ET.fromstring(data)
    for AAA in doc.findall('AAA'):
        print(len(AAA.findall('CCC')))


def PPTbyElement():
# Works just need to append the dataframe to add keyterms
    fileName = filedialog.askopenfilename()
    prs = Presentation(fileName)
    count = 0
    df = pd.DataFrame(columns=['Key', 'Count'])
    keys = ["Risk", "Performance", "Important", "Term 4"]
    for k in keys:
        count = 0


        for slide in prs.slides:
            title = slide.shapes.title.text
            print(title)


            if k in title:
                count += 1

        df2 = pd.DataFrame([[k, count]], columns=['Key', 'Count'])
        df = df.append(df2, ignore_index=False)

        if slide.shapes.title is None:
            continue
    print(df)



    print("----Process Complete-----")


def CountPagesPDF():
# Returns table of all PDFs with page number of each
    list_of_pdf_filenames = glob.glob('*pdf')
    df = pd.DataFrame(columns=['fileName', 'fileLocation', 'pageNumber'])

#PDF Data Frame
    for root, dirs, files in os.walk(filedialog.askdirectory()):

        for f in files:
            if f.endswith(".pdf"):

                pdf=PdfFileReader(open(os.path.join(root, f),'rb'))
                df2 = pd.DataFrame([[f, os.path.join(root,f), pdf.getNumPages()]], columns=['fileName', 'fileLocation', 'pageNumber'])
                df = df.append(df2, ignore_index=True)
    print(df.head)


    for root, dirs, files in os.walk(filedialog.askdirectory()):

        for f in files:
#PowerPoint Data Frame
# This works...retrieves the correct file and courn, but outputs the wrong number of pages on PPT
            if f.endswith(".pptx"):
                p = pptx.Presentation()
                df2 = pd.DataFrame([[f, os.path.join(root, f), len(p.slides)]],
                                   columns=['fileName', 'fileLocation', 'pageNumber'])
                df = df.append(df2, ignore_index=True)
    print(df.head)


def countSlides():
    #https://www.programmersought.com/article/20215432082/
    p = pptx.Presentation(filedialog.askopenfilename())

    print(len(p.slides))




def appendFileName():
    for root, dirs, files in os.walk(filedialog.askdirectory()):
        for f in files:
            #replaces '-' with a space, and appends the file with user input
            new_filename = f.replace("-", "")
            new_filename = input() + new_filename
            os.rename(f, new_filename)


def PDFpageExtraction():

    # this needs work: https://stackoverflow.com/questions/46184239/extract-a-page-from-a-pdf-as-a-jpeg
    # https://simply-python.com/2018/11/15/convert-pdf-pages-to-jpeg-with-python/


    filename = filedialog.askopenfilename()
    with tempfile.TemporaryDirectory() as path:
        images_from_path = convert_from_path(filename, output_folder=path, last_page=1, first_page=0)

    base_filename = os.path.splitext(os.path.basename(filename))[0] + '.jpg'

    save_dir = filedialog.askdirectory()

    for page in images_from_path:
        page.save(os.path.join(save_dir, base_filename), 'JPEG')


    #try:
    #    pdf_dir = filedialog.askdirectory()
    #    os.chdir(pdf_dir)
    #
    #    for pdf_file in os.listdir(pdf_dir):
    #
    #        if pdf_file.endswith(".pdf"):
    #
    #            pages = convert_from_path(pdf_file, 300)
    #            pdf_file = pdf_file[:-4]
    #
    #            for page in pages:
    #                page.save("%s-page%d.jpg" % (pdf_file, pages.index(page)), "JPEG")

def CompareImages():
    print("this doesn't work yet")
    folder_selected = filedialog.askdirectory()


class Bot(tk.Tk):

    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)
        container = tk.Frame(self)
        self.geometry('800x500')

        # Gets the requested values of the height and widht.
        windowWidth = self.winfo_reqwidth()
        windowHeight = self.winfo_reqheight()

        # Gets both half the screen width/height and window width/height-- the higher the divisor the more center(ish)
        positionRight = int(self.winfo_screenwidth() / 4 - windowWidth / 4)
        positionDown = int(self.winfo_screenheight() / 4 - windowHeight / 4)

        # Positions the window in the center of the page.
        self.geometry("+{}+{}".format(positionRight, positionDown))
        # This is the section of code which creates the main window


        container.pack(side="top", fill="both", expand=True)

        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)


        self.frames = {}

        for F in (StartPage, PageOne, PageTwo,Configurations):
            frame = F(container, self)

            self.frames[F] = frame

            frame.grid(row=0, column=0, sticky="nsew")

        self.show_frame(StartPage)

    def show_frame(self, cont):
        frame = self.frames[cont]
        frame.tkraise()


class StartPage(tk.Frame):

    def __init__(self, parent, controller):

        tk.Frame.__init__(self, parent)
        #self.geometry('600x400')
        label = tk.Label(self, text='The Asset Bot', font= LARGE_FONT)
        label.pack(padx=10, pady= 50)

        #countSlides
        countSlidesButton = tk.Button(self,
                                     text="Count Slides",

                                     command=countSlides)
        countSlidesButton.configure(width=10,
                                   fg="white",
                                   bg="royalblue3",
                                   activebackground="royalblue2",
                                   relief=FLAT)
        countSlidesButton.pack()
        countSlidesButton.pack(padx=10, pady=10, side=BOTTOM)



        #countSlides
        PPTtoTextParserButton = tk.Button(self,
                                     text="PPTtoTextParser",

                                     command=PPTtoTextParser)
        PPTtoTextParserButton.configure(width=10,
                                   fg="white",
                                   bg="royalblue3",
                                   activebackground="royalblue2",
                                   relief=FLAT)
        PPTtoTextParserButton.pack()
        PPTtoTextParserButton.pack(padx=10, pady=10, side=BOTTOM)







        CountFilesButton = tk.Button(self,
                                text="Count Files",

                                command=countFiles)
        CountFilesButton.configure(width=10,
                              fg="white",
                              bg = "royalblue3",
                              activebackground="royalblue2",
                              relief=FLAT)
        CountFilesButton.pack()
        CountFilesButton.pack(padx = 10, pady = 10, side=BOTTOM)



#Extract all the headings(titles) from a ppt slides
        PPTbyElementButton = tk.Button(self,
                                     text="PPT by Element",

                                     command=PPTbyElement)
        PPTbyElementButton.configure(width=10,
                                   fg="white",
                                   bg="royalblue3",
                                   activebackground="royalblue2",
                                   relief=FLAT)
        PPTbyElementButton.pack()
        PPTbyElementButton.pack(padx=10, pady=10, side=BOTTOM)


#Extract PDF pages as PNG
        PDFpagetoPNG = tk.Button(self,
                                     text="PDF to PNG",

                                     command=PDFpageExtraction)
        PDFpagetoPNG.configure(width=10,
                                   fg="white",
                                   bg="royalblue3",
                                   activebackground="royalblue2",
                                   relief=FLAT)
        PDFpagetoPNG.pack()
        PDFpagetoPNG.pack(padx=10, pady=10, side=BOTTOM)




#Count PDF Pages
        PDFCount = tk.Button(self,
                                     text="Count PDF Pages",

                                     command=CountPagesPDF)
        PDFCount.configure(width=10,
                                   fg="white",
                                   bg="royalblue3",
                                   activebackground="royalblue2",
                                   relief=FLAT)
        PDFCount.pack()
        PDFCount.pack(padx=10, pady=10, side=BOTTOM)


        CompareImagesButton = tk.Button(self,
                                text="Compare Images",

                                command=CompareImages)
        CompareImagesButton.configure(width=10,
                              fg="white",
                              bg = "royalblue3",
                              activebackground="royalblue2",
                              relief=FLAT)
        CompareImagesButton.pack()
        CompareImagesButton.pack(padx = 10, pady = 10, side=BOTTOM)






class PageOne(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text='The Easy Apply Bot', font = LARGE_FONT)
        label.pack(pady=10, padx=10, side=TOP)

        job_entry = tk.Entry(self,
                      text='job_entry',
                      font=('arial', 16, 'normal'))
        job_entry.insert(0, "job_entry")
        job_entry.pack(pady=10, padx=10, side=TOP)

        job_location = Entry(self,
                      text='job_location',
                      font=('arial', 16, 'normal'))
        job_location.insert(0, "job_location")
        job_location.pack(pady=10, padx=10, side=TOP)

        salary_entry = Entry(self,
                      text='salary_entry',
                      font=('arial', 16, 'normal'))
        salary_entry.insert(0, "salary_entry")
        salary_entry.pack(pady=10, padx=10, side=TOP)

        ApplyButton = tk.Button(self,
                                text="Easy Apply",

                                command=lambda: controller.show_frame(PageTwo))
        ApplyButton.configure(width=10,
                              fg="white",
                              bg = "royalblue3",
                              activebackground="royalblue2",
                              relief=FLAT)
        ApplyButton.pack()
        ApplyButton.pack(padx = 10, pady = 10, side=BOTTOM)

        button1 = tk.Button(self, text="Statistics",
                            command=lambda: controller.show_frame(PageTwo))
        button1.pack()
        button1.pack(padx = 10, pady = 10, side=BOTTOM)

        button2 = tk.Button(self, text="Quit",
                            command=lambda: controller.destroy())
        button2.pack(padx = 10, pady = 10, side=BOTTOM)

        button3 = tk.Button(self, text="Configurations",
                            command=lambda: controller.show_frame(Configurations))
        button3.pack()
        button3.pack(padx = 10, pady = 10, side=BOTTOM)

class PageTwo(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent, relief=RAISED, borderwidth=1)
        label = tk.Label(self, text="'Statistics'", font=LARGE_FONT)
        label.pack(pady=10, padx=10, side=TOP)

        button2 = tk.Button(self, text="Main Page",
                            command=lambda: controller.show_frame(PageOne))
        button2.pack(padx = 10, pady = 10, side=BOTTOM)

        quitButton = tk.Button(self, text="Quit",
                            command=lambda: controller.destroy())
        quitButton.pack(padx = 10, pady = 10, side=BOTTOM)

class Configurations(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent, relief=RAISED, borderwidth=1)
        #self.geometry('600x400')
        label = tk.Label(self, text="Configurations", font=LARGE_FONT)
        label.pack(pady=10, padx=10, side=TOP)

        first_name_entry = Entry(self,
                      text='first_name_entry',
                      font=('arial', 16, 'normal'))
        first_name_entry.insert(0, "first_name_entry")
        first_name_entry.pack(pady=10, padx=10, side=TOP)

        last_name_entry = Entry(self,
                      text='last_name_entry',
                      font=('arial', 16, 'normal'))
        last_name_entry.insert(0, "last_name_entry")
        last_name_entry.pack(pady=10, padx=10, side=TOP)

        job_title_entry1 = Entry(self,
                      text='job_title_entry1',
                      font=('arial', 16, 'normal'))
        job_title_entry1.insert(0, "job_title_entry1")
        job_title_entry1.pack(pady=10, padx=10, side=TOP)

        job_description_entry1 = Entry(self,
                      text='job_description_entry1',
                      font=('arial', 16, 'normal'))
        job_description_entry1.insert(0, "job_description_entry1")
        job_description_entry1.pack(pady=10, padx=10, side=TOP)

        job_title_entry2 = Entry(self,
                      text='job_title_entry2',
                      font=('arial', 16, 'normal'))
        job_title_entry2.insert(0, "job_title_entry2")
        job_title_entry2.pack(pady=10, padx=10, side=TOP)

        job_description_entry2 = Entry(self,
                      text='job_description_entry2',
                      font=('arial', 16, 'normal'))
        job_description_entry2.insert(0, "job_description_entry2")
        job_description_entry2.pack(pady=10, padx=10, side=TOP)

        school_entry1 = Entry(self,
                      text='school_entry1',
                      font=('arial', 16, 'normal'))
        school_entry1.insert(0, "school_entry1")
        school_entry1.pack(pady=10, padx=10, side=TOP)

        school_entry2 = Entry(self,
                      text='school_entry2',
                      font=('arial', 16, 'normal'))
        school_entry2.insert(0, "school_entry2")
        school_entry2.pack(pady=10, padx=10, side=TOP)


        button2 = tk.Button(self, text="Main Page",
                            command=lambda: controller.show_frame(PageOne))
        button2.pack(padx = 10, pady = 10, side=BOTTOM)

        quitButton = tk.Button(self, text="Quit",
                            command=lambda: controller.destroy())
        quitButton.pack(padx = 10, pady = 10, side=BOTTOM)

        SaveButton = tk.Button(self, text="Save",
                            command=lambda: controller.show_frame(Save))  #this should call the function to update config file
        SaveButton.configure(width=10,
                              fg="white",
                              bg = "royalblue3",
                              activebackground="royalblue2",
                              relief=FLAT)
        SaveButton.pack()
        SaveButton.pack(padx = 10, pady = 10, side=BOTTOM)


app = Bot()
app.mainloop()








